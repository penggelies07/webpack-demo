(1) 利用node.js中的express服务器和webpack中dev server实现开启服务有什么不同吗？ 
    经查询，dev server也是一个轻量级的node.js express服务器，实际上相当于是一个封装好的express的http服务器+调用webpack-dev-middleware。 
    例如一般可能会有如下的配置，当服务器启动时，启动命令是：webpack-dev-server –config wepack.config.js(配置文件路径)。

(2) 热加载/热更新，使用devServer和使用webpack-dev-middleware+webpack-hot-middleware区别
    express+webpack-dev-middleware，源文件改动后，会进行实时编译，再用webpack-dev-middleware将编译后文件输出到内存中. 
    而后面两种，如果单用前面一种需要手动刷新浏览器，加上webpack-hot-middleware才可以实现浏览器的无刷新更新，也就是HMR，不需要刷新整个页面。
    热加载却要刷新整个页面。

(3) path.resolve( )，到底是怎么进行路径转换的？
    path.resolve('/foo','/bar','baz');     // /bar/baz
    path.resolve('/foo/bar','./baz');      // /foo/bar/baz
    path.resolve('/foo/bar','/tmp/file/'); // /tmp/file

(4) 什么是Sourcemap?
    我们在打包中，将开发环境中源代码经过压缩，去空格，babel编译转化，最终可以得到适用于生产环境的项目代码，这样处理后的项目代码和源代码之间差异性很大，会造成无法debug的问题。
    举例来说，如果压缩等处理过的生产环境中的代码出现bug，调试的时候只能定位到压缩处理后的代码的位置，无法定位到开发环境中的源代码。
    sourcemap就是为了解决上述代码定位的问题，简单理解，就是构建了处理前的代码和处理后的代码之间的桥梁。主要是方便开发人员的错误定位。这里的处理操作包括：
    (I）压缩，减小体积
    (II）将多个文件合并成同一个文件
    (III）其他语言编译成javascript，比如TypeScript和CoffeeScript等

(5) 什么是DataURL?
    DataURL最早是出现在HTML文件img标签中的关于图片的引用，DataURL提供了一种将图片”嵌入”到HTML中的方法。
    跟传统的img的src属性指向服务器中某张图片的地址不同，在Data URL协议中，图片被转换成base64编码的字符串形式，并存储在URL中，冠以mime-type。DataURL使用于如下的场景:
    (I）访问外部资源受限
    (II）图片体积小，占用一个HTTP会话资源浪费

(6) webpack的Sourcemap
    webpack在打包中同样支持Sourcemap，并且提供了十几种的组合。官网给出的为例：
    (I) eval：每一个模块都执行eval()过程，并且会追加//@ sourceURL
    (II）eval-source-map：每一个模块在执行eval()过程之后，并且会为每一个模块生成sourcemap文件，生成的sourcemap文件通过DataURL的方式添加
    (III）cheap-eval-source-map：跟eval-source-map相同，唯一不同的就是增加了”cheap”，”cheap”是指忽略了行信息。这个属性同时也不会生成不同loader模块之间的sourcemap。
    (VI）cheap-module-eval-source-map：与cheap-eval-source-map相同，但是包含了不同loader模块之间的sourcemap